"""
컴프리헨션이 클 때는 제너레이터 표현식을 고려하자

리스트 컴프리헤션의 문제점은 입력 시퀀스에 있는 각 값별로 아이템을 하나씩 담은
새 리스트를 통째로 생성한다는 점이다.

예를 들어 파일을 읽고 각줄에 있는 문자의 개수를 반환한다고 하면
각줄의 길이만큼 메모리가 필요하다. 또한 파일에 오류가 있거나
끊김이 없는 네트워크 소켓일 경우 문제가 발생한다.

파이썬은 이 문제를 해결하기 위해 제너레이터 표현식을 제공한다.
즉 한 번에 한 아이템을 내주는 이터레이터로 평가된다고 한다.
"""

it = (len(x) for x in open('C:/Users/Donkey/Desktop/test.txt', 'rb'))
print(it)  # <generator object <genexpr> at 0x0000023489FB9A98>
print(next(it))  # 64
print(next(it))  # 2

"""
제너레이터 표현식의 또 다른 강력한 결과는 다른 제너레이터 표현식과 함께
사용할 수 있다는 점이다.

이 이터레이터를 전신시킬 때 마다 루프의 도미노 효과로 내부 이터레이터도 전진시키고
조건 표현식을 계산해서 입력과 출력을 처리한다
"""

roots = ((x, x**0.5) for x in it)
print(next(roots))
print(next(roots))

"""
제너레이터 표현식이 반환한 이터레이터에는 상태가 있으므로 이터레이터를 한 번 넘게 사용하지 않도록 주의 해야한다.
제너레이터 표현식은 이터레이터로 한 번에 한 출력만 만드므로 메모리 문제를 피할 수 있다.
"""