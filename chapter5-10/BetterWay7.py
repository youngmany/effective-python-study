"""
map 과 filter 대신 리스트 컴프리헨션을 사용하자
"""

a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
squares = [x**2 for x in a]
print(squares)  # [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

"""
간단한 연산에는 컴프리헨션이 내장 함수 map 보다 명확하다.
map 을 쓰려면 계산에 필요한 lambda 함수를 생성해야 해서 깔끔해 보이지 않는다.
단, 위에 해당하는 경우에는 map 함수를 사용하는게 10배 정도 빠르다.
(10000번 돌린경과 리프리헨션 : 0.04초, map : 0.003초 정도)
"""

squares = map(lambda x: x ** 2, a)

"""
map 과 달리 리스트 컴프리헨션을 사용하면 입력 리스트에 있는 아이템을 간편하게 걸러내서
그에 대응하는 출력을 결과에서 삭제할 수 있다.
이때도 속도 차이는 존재한다.
"""

even_squares = [x**2 for x in a if x % 2 == 0]
print(even_squares)  # [4, 16, 36, 64, 100]
alt = map(lambda x: x**2, filter(lambda x: x % 2 == 0, a))
assert even_squares == list(alt)

"""
lambda ?
익명 함수로 메모리를 아끼고 가독성을 높인다고 한다.
한번 쓰이고 다음줄로 넘어가면 heap 메모리 영역에서 증발

* 참고
파이썬에서는 모든것이 객체로 관리되고 각 객체들은 레퍼런스 카운터를 갖게된다.
이 카운터가 0, 즉 누구도 참조하지 않게되면 메모리를 자동으로 환원하게 된다
"""
u_sum = lambda x, y: x+y  # PEP8 에 의하면 lambda 표현식으로 할당하지 말고 함수로 정의하라고 나온다.
print(u_sum(1, 3))

"""
map ?
'게으른 연산'을 통해 메모리를 크게 절약할 수 있다.
입력받은 자료형의 각 요소가 합수에 의해 수행된 결과를 묶어서 map iterator 객체로 리턴

게으른 연산 ?
'필요할 때 가져다 쓴다'
"""
