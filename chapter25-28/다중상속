* 다중상속?
말 그대로 부모클래스가 여러개 있는 상속형태이다.
최근 객체지향언어에서는 다중상속을 금지하고 있다고 한다. C++, python 에서는 다중상속을 허용 하지만
JAVA, C# 등등은 다중상속을 금한다

다중상속을 기피해야하는 이유는 알 수 없는 여러가지 문제들이 발생하기 때문이라고 한다.
알 수 없는 여러가지 문제들이란? 만약 다중상속을 받는 자식클래스가 있다고 가정하자.
그런데 부모클래스들중 같은 이름의 메소드를 가지고 있는 부모클래스가 있다면 그리고 그것을 호출한다면
어떠한 부모클래스의 메소드가 호출될까 (물론 이런 경우 MRO에 의해 호출순서가 정해진다고함)
사용하고자 했던 메소드가 아닌 MRO 순위가 높은 메소드가 호출되고 그에 따라 결과값이 달라질 수 있다.
또한 이런경우 에러가 발생하는것이 아니기에 어떠한 부분이 의도한 코딩되로 되지 않는지 파악하는데 매우 어렵다고 한다.
그리고 자신이 만든 부모객체가 아니라면 내부 구조가 어떻게 이루어 졌는지 모르기 때문에 상황은 더 복잡해 진다고한다.
또한 자식클래스가 상속받는 부모클래스들 또한 상속을 받은 클래스라면 조금의 조작만으로도
상황은 더욱 더 악화될 수 있다.






* ClassMethod?
말 그대로 클래스가 공유하는 메소드 이다.
인스턴스 메소드는 객체를 기준으로 사용할 수 있지만 클래스 메소드는 클래스 자체에서 사용이 가능하다.
즉 클래스.클래스_메소드() 가 가능하다는 소리다





